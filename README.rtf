{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 HelveticaNeue-Bold;\f4\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red244\green246\blue249;
\red10\green77\blue204;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c96471\c97255\c98039;
\cssrgb\c1176\c40000\c83922;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2 1. MyRetail REST API - Objectives\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 \
MyRetail RESTful service offers the following features \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 1.  Retrieve the  Product and Price information for a given product ID\
\
2. Ability to  modify the price information in the database\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 \cb4 \strokec2 2. Frameworks/Tool/Technologies:\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb4 \strokec2 \
\pard\tx20\tx458\pardeftab720\li458\fi-459\partightenfactor0
\ls1\ilvl0\cf2 \cb1 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	1.	}\cf2 \cb4 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2 Spring Boot Rest Template: to expose REST Services, and to develop a REST client to consume the product information from external API.\
\pard\pardeftab720\partightenfactor0
\cf2 \
2. MongoDB:  To store the product price information.\
\
3. Docker: To build and manage the deployment artifacts and to create/manage the MongoDB\
\
4. Mockito: Unit Testing\
\
5. PostMan : Unit testing\
\
6. Maven: Build Configuration\
\
7. GIT: Source configuration\
\
******Services:\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb4 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f3\b \cf5 \cb3 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 3. Services - Implementation \
\
  3.1 Get Product Information:\
\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf2 \cb3 \strokec2  The consumer can do  a GET request at the path "/products/\{id\}" for a product detail to "redsky.target.com" and retrieves the product description, and is appended to the available price and name information.\
For a product with product id '13860428', the sample JSON output is as shown below\
\{"id":13860428,"name":"The Big Lebowski (Blu-ray) (Widescreen)","current_price":\{"value": 13.49,"currency_code":"USD"\}\}\
\
\pard\pardeftab720\partightenfactor0

\f3\b \cf5 \cb3 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2    3. 2. Update Product Price in MongoDB:\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf2 \cb3 \strokec2 The price informatio could be udpated with this API. The user/client application can do a PUT request with input similar to the response received in GET and should be able to modify the price in the datastore. The request is done at the same path "/products/\{id\}"\
####Sample Input: JSON Body - \{"value": 15.67,\'94currency_code\'94:"USD"\}\
\
\pard\pardeftab720\partightenfactor0

\f3\b \cf2 \cb3 \strokec2 4. Instructions to setup the environment\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf2 \cb3 \strokec2 \
 - Clone the code from the git repository\
The API can be deployed in dev environment with Intellij/Eclipse or commandline, or as a  Docker container\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \ul \ulc2 \strokec2 4.1 Dev Environment:\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \ulnone \strokec2 \
 - Install Maven, Docker \
\pard\tx20\tx305\pardeftab720\li305\fi-306\partightenfactor0
\ls2\ilvl0
\fs33\fsmilli16800 \cf2 \cb1 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	-	}
\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2 Docker:  \'91docker-compose -f docker-mongo.yml up -d\'92  (to Install mongoDB as docker container), or setup a standalone MongoDb \
\ls2\ilvl0
\fs33\fsmilli16800 \cf2 \cb1 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	-	}
\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2  maven clean package - to create Jar file for REST endpoints\
\ls2\ilvl0
\fs33\fsmilli16800 \cf2 \cb1 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	-	}
\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2 execute:  mvn Sprint-boot:run. to bring up the server\
\pard\pardeftab720\partightenfactor0
\cf2  \
\pard\tx20\tx305\pardeftab720\li305\fi-306\partightenfactor0
\ls3\ilvl0
\fs33\fsmilli16800 \cf2 \cb1 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	-	}
\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2 or run the API in docker container \
\pard\pardeftab720\partightenfactor0
\cf2 docker-compose up -d\
\
\pard\pardeftab720\partightenfactor0

\f3\b \cf5 \cb3 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 5  Testing Results\
\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf2 \cb3 \strokec2 The testcases are implemented using \'91mockito\'92 framework under the folder \'92src\\test\\java\\ '.\
The test cases can be executed by running the command 'mvn test'\
\pard\pardeftab720\partightenfactor0

\f3\b \cf5 \cb3 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ^^^PostMan UI:\
 \
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf2 \cb3 \strokec2 Attached the Test results using Postman UI\
\
\pard\tx20\tx458\pardeftab720\li458\fi-459\partightenfactor0
\ls4\ilvl0\cf2 \cb1 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	1.	}\cf2 \cb3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2 GET Product Request \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
2. PUT: to update the price for a given product id\
 \
2.1 Updated Price: Response of the PUT API \
\
2.2 Updated Data from the GET product API \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b \cf2 \cb3 \strokec2 _____Current Automated Test Coverage:\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf2 \cb3 \strokec2  \
\
\
\
\
\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b \cf5 \cb3 \strokec5 \
}